#!/usr/bin/env electron
require('pkginfo')(module);

const path = require('path');

const {ArgumentParser} = require('argparse');
const Microdrop = require('../index.js');
const electron = require('electron');

const PKG_NAME = module.exports.name;
const env = module.exports.environment;
console.log({env});
var parser = new ArgumentParser({
  version: module.exports.version,
  addHelp:true,
  description: 'microdrop'
});

let input;

// Reset (clear application data)
input = [ '-r', '--reset' ];
parser.addArgument(input, {
  help: 'Reset application data',
  nargs: 0
})

// HTTP Port
input = ['--http-port'];
parser.addArgument(input, {
  help: `HTTP port (default ${env.HTTP_PORT})`,
  defaultValue: env.HTTP_PORT,
  type: 'int'
});

// Websocket port
input = ['--mqtt-ws-port'];
parser.addArgument(input, {
  help: `MQTT websocket port (default ${env.MQTT_WS_PORT})`,
  defaultValue: env.MQTT_WS_PORT,
  type: 'int'
});

// TCP Port
input = ['--mqtt-tcp-port'];
parser.addArgument(input, {
  help: `MQTT TCP port (default ${env.MQTT_TCP_PORT})`,
  defaultValue: env.MQTT_TCP_PORT,
  type: 'int'
});

const args = parser.parseArgs();
console.log({args});
if (args.reset != null) {
  Microdrop.reset(electron).then((d) => {
    electron.app.exit();
  });
} else {
  Microdrop(electron, args);
}
